/** 
编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
示例 1：
输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。

示例 2：
输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。

思路：
计算个数，按照我们之前的思路，把整个数字转为字符串，类似这样：
然后直接遍历计算就可以了，这是我为什么把它归为记数类别的原因
 */
// 数字 0001 => String(0001) => '0001' => 遍历看1的个数
var hammingWeight = function (n) {
  return n.toString(2).split('').reduce((pre, cur) => pre + Number(cur), 0);
};
/** 
当然也可以把它归为数学类，我们用数学的算法来解，先看答案，我们再解析。
原理：
每执行一次x = x & (x-1)，会将x用二进制表示时最右边的一个1变为0，因为x-1将会将该位(x用二进制表示时最右边的一个1)变为0。
因此，对 x 重复该操作，直到 x 变成 0，则操作次数即为 x 的二进制数中的 1 的数目。
 */
var hammingWeight = function (n) {
  let ret = 0;
  while (n) {
    n &= n - 1;
    ret++;
  }
  return ret;
};
